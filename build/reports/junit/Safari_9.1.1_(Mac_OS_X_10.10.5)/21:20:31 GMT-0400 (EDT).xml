<?xml version="1.0"?>
<testsuite name="Safari 9.1.1 (Mac OS X 10.10.5)" package="" timestamp="2016-07-15T01:20:34" id="0" hostname="Audrey.local" tests="142" errors="0" failures="30" time="0.215">
  <properties>
    <property name="browser.fullName" value="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/601.6.17 (KHTML, like Gecko) Version/9.1.1 Safari/601.6.17"/>
  </properties>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions setPriority if assigning a different value, should be different" time="0.003" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions setPriority if caseCode is undefined, does not modify data.cardPriorities" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions setPriority if caseCode and value are both undefined, does not modify cardPriorities" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions removePriority after called with legit code, data.cardPriorities should be smaller" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions removePriority after called, and caseCode=undefined, data.cardPriorities should be the same" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions removePriority should not call setPriority when the caseCode is undefined" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions saveCardPriorities if called with arguments, then calls $cookies.putObject with that arg" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions saveCardPriorities once called w/o args, $cookies.putObject should also be called" time="0.006" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions saveCardPriorities once called w/o args, $cookies.getObject(cookieStrings.cardPriorities) should be the same as cardPriorities" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions getCardPriorities should return an object" time="0.003" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions getCardPriorities should return a defined object" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions getCardPriorities if cardPriorities is undefined should still return an defined object if cookieData['cardPriorities'] is defined" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions getCardPriorities if cardPriorities is undefined should return cookieData[cardPriorities]" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData cards functions getCard should return an object if this is one of the cards" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData cards functions getCard should return -1 if the object is not one of the cards" time="0.014" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData cards functions getCard should return -1 if caseCode is undefined" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData cards functions setCard if the card is the same card as before, flashCardData.cards should be the same" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData cards functions setCard if a different card is added, flashCardData.cards should be different" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData cards functions setCard if caseCode is undefined, shouldn't do anything to either cards or practiceCards" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData cards functions removeCard if caseCode is undefined, should not modify cards" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData cards functions removeCard if caseCode is undefined, should not modify practiceCards" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practiceCards functions savePracticeCards when called with args once called, $cookies.putObject should also be called" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practiceCards functions savePracticeCards when called with args after called, $cookies.getObject(practiceCards) should be the same as fakeData" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practiceCards functions savePracticeCards when called without args once called, $cookies.putObject should also be called" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practiceCards functions savePracticeCards when called without args after called, $cookies.getObject(practiceCards) should be the same as practiceCards" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practiceCards functions getPracticeCards once called, returns practiceCards" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practiceCards functions getPracticeCards if called and practiceCards is undefined, returns cookieData.practiceCards" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions saveCards called with args if value is undefined, does not save" time="0.003" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions saveCards called with args if value is defined should save by calling $cookies.putObject" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions saveCards called with args if value is defined if saved in cookies, getting it from $cookies.getObject should be the same" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions saveCards called without args cards is defined save it to the dataCards string" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions saveCards called without args cards is defined should be able to call the same object through $cookies.getObject" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions saveCards called without args cards is not defined should assign it to a default value and save" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions saveCards called without args cards is not defined should be able to retrieve the saved value through $cookies.getObject" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions getCards cards is defined should return same value as cards" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions getCards cards is undefined should assign it to default value and return the default value" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Controller: ContentController Should have access to cases" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Controller: ContentController Priority should be changed if the select box is changed" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics TimeConversion should be defined" time="0.004" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics Statistics' stats should be defined" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics methods should be defined" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable mean should be defined" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable stdDev should be defined" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable variance should be defined" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable mean5 should be defined" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable mean35 should be defined" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable mean10 should be defined" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable mean1012 should be defined" time="0.005" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable median should be defined" time="0.005" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable best should be defined" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable worst should be defined" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable q1 should be defined" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable q3 should be defined" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable iqr should be defined" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable mean100 should be defined" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable range should be defined" time="0.003" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics addData data should be appended when this function is called with proper args" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics addData data that doesn't have a date object and/or a times string should not be appended" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics addData data should be added to the end of the array" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics loadData data should change in some way when function is called" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics loadData stats.data should contain integers" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics loadData stats.data should be defined still" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics calculate once called, the variables of stats should change" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:161:90
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics calculate should be called after loadData is called" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:162:82
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics calculate should be called after addData is called" time="0.015" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:163:81
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean stats.mean should change if mean() is called" time="0.005" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean mean should be 0 if the array is too small" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean mean should not be negative" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions stdDev if the variance is negative, somehow, standard deviation should be 0" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions stdDev standard deviation should be the square root of variance" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions stdDev different sets of numbers should give different standard deviations" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions stdDev if the length of data ≤ 5, stddev should be 0" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions stdDev if data.length > 0 and mean = 0, should call mean() and variance() before calculating" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected spy mean to have been called.
tests/stats.spec.js:240:48
</failure>
    <failure type="">Expected spy variance to have been called.
tests/stats.spec.js:241:52
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions variance if the length of data ≤ 5, variance should be 0" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions variance variance should be the standard deviation squared" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:252:92
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean5 after called, and data length ≥ to 5, stats.mean5 should not be the same" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:255:115
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean5 different sets of data should give different means of the last 5" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:256:107
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean5 after called, and data length &lt; 5, stats.mean5 should be the same" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:257:108
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean35 after called, and data length ≥ 5, stats.mean35 should not be the same" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:260:113
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean35 after called, and data length &lt; 5, stats.mean35 should be the same" time="0.005" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:261:109
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean35 after called, and data is different, stats.mean35 should not be the same" time="0.003" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:262:115
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean10 when called, stats.mean10 should only change if the length of the data array is greater than/equal to 10" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:265:147
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean1012 encountered a declaration exception" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Error: 'expect' was used when there was no current spec, this could be because an asynchronous test timed out in node_modules/jasmine-core/lib/jasmine-core/jasmine.js (line 938)
tests/stats.spec.js:267:45
tests/stats.spec.js:267:14
tests/stats.spec.js:166:12
tests/stats.spec.js:19:11
global code@tests/stats.spec.js:18:9
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean100 if the size of the data array is less than 100, mean100 should be zero when this is called" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:269:132
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions q1 after called, q1 should be smaller than q3" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:272:85
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions median after called, and data length greater than 3, median should not be 0" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:275:111
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions median after called, stats.median should change" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:276:83
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions median after called, stats.median should be different for different data" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:277:108
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions q3 after called, and data.length greater han 10, should be greater than q1" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:280:114
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions best after called, and data.length ≥ 3, stats.best should be &lt; stats.worst" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:283:112
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions worst after called, and data.length ≥ 3, stats.worst should be > stats.best" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:286:113
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions iqr after called, stats.iqr should be smaller than the entire range's value" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:289:114
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions range after called, stats.range should be a string if data.length > 3" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:292:106
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions range after called, stats.range should be 0 if data.length ≤ 3" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/stats.spec.js:293:99
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion milliToSecond should be able to handle positive integers and round them" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion milliToMinute should be able to handle positive integers and round" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion getSeconds should be able to handle positive integers and floor them" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion getHours should be able to handle positive integers" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion getHours should be able to handle special, very unlikely cases" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion getMinutes should be able to handle positive integers" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion getMinutes should be able to floor the positive integers properly" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion getMillis should be able to handle positive integers" time="0.004" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion getMillis should be able to handle overflow" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion secondToMilli should handle any positive integer" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion minuteToMilli should handle any positive integer" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion stringToMillis Turn a regular time string in mm:ss.mmm into a number of milliseconds" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion stringToMillis Should be able to handle an abnormal time string in an odd format" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion stringToMillis Should be able to handle cases where the units are not what we're used to" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion stringToMillis Should be able to also handle cases where both the units and the formatting are unfamiliar" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion millisToString Should be able to handle positive integers including and below 59 * 60000 + 59 * 1000 + 999" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="Filter: millisToString Should be able to handle normal, sub-3599999, quantities of milliseconds for formatting" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).Filter: millisToString"/>
  <testcase name="Filter: millisToString Should be able to handle time strings and return as-is" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).Filter: millisToString"/>
  <testcase name="Filter: millisToString Should return 0 if it's anything but a number or a time string" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).Filter: millisToString"/>
  <testcase name="TimerController deleteRecord Deletes a record given an index that is smaller than $scope.records.length" time="0.004" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).TimerController">
    <failure type="">Error: [ng:areq] Argument 'timerController' is not a function, got undefined
http://errors.angularjs.org/1.5.7/ng/areq?p0=timerController&amp;p1=not%20a%20function%2C%20got%20undefined in node_modules/angular/angular.js (line 68)
node_modules/angular/angular.js:68:32
assertArg@node_modules/angular/angular.js:1885:19
assertArgFn@node_modules/angular/angular.js:1895:12
$controller@node_modules/angular/angular.js:10210:20
node_modules/angular-mocks/angular-mocks.js:2214:21
tests/timer.spec.js:17:32
</failure>
    <failure type="">ReferenceError: Can't find variable: $scope in tests/timer.spec.js (line 23)
tests/timer.spec.js:23:10
</failure>
  </testcase>
  <testcase name="TimerController deleteRecord Does not delete a record that has a negative index" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).TimerController">
    <failure type="">Error: [ng:areq] Argument 'timerController' is not a function, got undefined
http://errors.angularjs.org/1.5.7/ng/areq?p0=timerController&amp;p1=not%20a%20function%2C%20got%20undefined in node_modules/angular/angular.js (line 68)
node_modules/angular/angular.js:68:32
assertArg@node_modules/angular/angular.js:1885:19
assertArgFn@node_modules/angular/angular.js:1895:12
$controller@node_modules/angular/angular.js:10210:20
node_modules/angular-mocks/angular-mocks.js:2214:21
tests/timer.spec.js:17:32
</failure>
    <failure type="">ReferenceError: Can't find variable: $scope in tests/timer.spec.js (line 29)
tests/timer.spec.js:29:10
</failure>
  </testcase>
  <testcase name="Filter: colorCodeAlgorithms should be able to recognize all 9 sequences" time="0.003" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).Filter: colorCodeAlgorithms"/>
  <testcase name="Filter: colorCodeAlgorithms should return blanks for blank sequences" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).Filter: colorCodeAlgorithms"/>
  <testcase name="Filter: colorCodeAlgorithms inputs without the 9 sequences should be returned as-is" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).Filter: colorCodeAlgorithms"/>
  <testcase name="&#x9;Test:&#x9; Controller: CubeScrambler scramble When CubeScrambler is instantiated, it already has a scrambling code initialized" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/cube-scrambler.spec.js:8:120
loaded@http://127.0.0.1:9876/context.js:151:17
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Controller: CubeScrambler scramble When $scope.scramble is called, $scope.code should change" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/cube-scrambler.spec.js:9:97
loaded@http://127.0.0.1:9876/context.js:151:17
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Controller: CubeScrambler scramble When $scope.scramble is not called, $scope.code should not change" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/cube-scrambler.spec.js:10:105
loaded@http://127.0.0.1:9876/context.js:151:17
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData both the module and its functions should be defined" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData its dependencies should be defined" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData initialize After initialization, flashCards' objects should be initialized" time="0.005" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions isPracticing should return the correct boolean value given a proper case code" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions isPracticing should return false if given a case code results in undefined" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions isPracticing should return false if given an undefined case code" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions setPracticing even after setting a case code to the opposite value, the refs to the objects should be the same" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions setPracticing after setting a case code to the its same value, objects should be the same" time="0.009" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
tests/flash-cards.spec.js:86:116
loaded@http://127.0.0.1:9876/context.js:151:17
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions setPracticing if caseCode is undefined, should not attempt to change data.practicing" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions removePracticing once called with legit data, setPracticing should be called" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions removePracticing if called with caseCode=undefined, should not attempt to do anything" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions removePracticing if called and data.practicing[caseCode] is undefined, should not do anything" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions savePracticing when called w/o arguments, $cookies.putObject() should be called but with data.practicing" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions savePracticing when called w/ argument, $cookies.putObject() should be called but with our data" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions savePracticing after called w/o args, $cookies.getObject(cookies.practicing) should be the same as data.practicing" time="0.002" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions getPracticing if data.practicing is defined, should return" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions getPracticing if data.practicing is undefined, should return cookieData.practicing" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions getPriority if data.cardPriorities[caseCode] is defined, returns a value ≥ 0" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions getPriority if data.cardPriorities[caseCode] is undefined, returns -1" time="0" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions getPriority if caseCode is undefined, returns a -1" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions setPriority if cardPriorities[caseCode] was undefined before, and a defined value is passed through, should be defined now" time="0.001" classname="Safari_9_1_1_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <system-out>
    <![CDATA[Safari 9.1.1 (Mac OS X 10.10.5) LOG: 'Defined.'
,Safari 9.1.1 (Mac OS X 10.10.5) LOG: 'Defined.'
,Safari 9.1.1 (Mac OS X 10.10.5) LOG: 'Defined.'
,Safari 9.1.1 (Mac OS X 10.10.5) LOG: 'cookieData.cards: {"maxNumber":6,"options":[0,1,2,3,4,5]}'
,Safari 9.1.1 (Mac OS X 10.10.5) LOG: 'Defined.'
,Safari 9.1.1 (Mac OS X 10.10.5) LOG: '00:00.000'

]]>
  </system-out>
  <system-err/>
</testsuite>