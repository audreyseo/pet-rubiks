<?xml version="1.0"?>
<testsuite name="Chrome 51.0.2704 (Mac OS X 10.10.5)" package="" timestamp="2016-07-18T20:04:10" id="0" hostname="Audrey.local" tests="159" errors="0" failures="1" time="0.382">
  <properties>
    <property name="browser.fullName" value="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"/>
  </properties>
  <testcase name="Filter: colorCodeAlgorithms should be able to recognize all 9 sequences" time="0.024" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).Filter: colorCodeAlgorithms"/>
  <testcase name="Filter: colorCodeAlgorithms should return blanks for blank sequences" time="0.004" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).Filter: colorCodeAlgorithms"/>
  <testcase name="Filter: colorCodeAlgorithms inputs without the 9 sequences should be returned as-is" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).Filter: colorCodeAlgorithms"/>
  <testcase name="&#x9;Test:&#x9; Controller: CubeScrambler code333 should be defined" time="0.006" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Controller: CubeScrambler scramble When CubeScrambler is instantiated, it already has a scrambling code initialized" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Controller: CubeScrambler scramble When $scope.scramble is called, $scope.code should change" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Controller: CubeScrambler scramble When $scope.scramble is not called, $scope.code should not change" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;">
    <failure type="">Expected true to be false.
    at Object.&lt;anonymous&gt; (tests/cube-scrambler.spec.js:40:101)
</failure>
  </testcase>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData both the module and its functions should be defined" time="0.004" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData its dependencies should be defined" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData initialize After initialization, flashCards' objects should be initialized" time="0.007" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions isPracticing should return the correct boolean value given a proper case code" time="0.007" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions isPracticing should return false if given a case code results in undefined" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions isPracticing should return false if given an undefined case code" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions setPracticing even after setting a case code to the opposite value, the refs to the objects should be the same" time="0.004" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions setPracticing after setting a case code to the its same value, objects should be the same" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions setPracticing if caseCode is undefined, should not attempt to change data.practicing" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions removePracticing once called with legit data, setPracticing should be called" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions removePracticing if called with caseCode=undefined, should not attempt to do anything" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions removePracticing if called and data.practicing[caseCode] is undefined, should not do anything" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions savePracticing when called w/o arguments, $cookies.putObject() should be called but with data.practicing" time="0.005" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions savePracticing when called w/ argument, $cookies.putObject() should be called but with our data" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions savePracticing after called w/o args, $cookies.getObject(cookies.practicing) should be the same as data.practicing" time="0.004" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions getPracticing if data.practicing is defined, should return" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practicing functions getPracticing if data.practicing is undefined, should return cookieData.practicing" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions getPriority if data.cardPriorities[caseCode] is defined, returns a value â‰¥ 0" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions getPriority if data.cardPriorities[caseCode] is undefined, returns -1" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions getPriority if caseCode is undefined, returns a -1" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions setPriority if cardPriorities[caseCode] was undefined before, and a defined value is passed through, should be defined now" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions setPriority if assigning a different value, should be different" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions setPriority if caseCode is undefined, does not modify data.cardPriorities" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions setPriority if caseCode and value are both undefined, does not modify cardPriorities" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions removePriority after called with legit code, data.cardPriorities should be smaller" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions removePriority after called, and caseCode=undefined, data.cardPriorities should be the same" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions removePriority should not call setPriority when the caseCode is undefined" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions saveCardPriorities if called with arguments, then calls $cookies.putObject with that arg" time="0.006" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions saveCardPriorities once called w/o args, $cookies.putObject should also be called" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions saveCardPriorities once called w/o args, $cookies.getObject(cookieStrings.cardPriorities) should be the same as cardPriorities" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions getCardPriorities should return an object" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions getCardPriorities should return a defined object" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions getCardPriorities if cardPriorities is undefined should still return an defined object if cookieData['cardPriorities'] is defined" time="0" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cardPriority functions getCardPriorities if cardPriorities is undefined should return cookieData[cardPriorities]" time="0" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData cards functions getCard should return an object if this is one of the cards" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData cards functions getCard should return -1 if the object is not one of the cards" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData cards functions getCard should return -1 if caseCode is undefined" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData cards functions setCard if the card is the same card as before, flashCardData.cards should be the same" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData cards functions setCard if a different card is added, flashCardData.cards should be different" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData cards functions setCard if caseCode is undefined, shouldn't do anything to either cards or practiceCards" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData cards functions removeCard if caseCode is undefined, should not modify cards" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData cards functions removeCard if caseCode is undefined, should not modify practiceCards" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practiceCards functions savePracticeCards when called with args once called, $cookies.putObject should also be called" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practiceCards functions savePracticeCards when called with args after called, $cookies.getObject(practiceCards) should be the same as fakeData" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practiceCards functions savePracticeCards when called without args once called, $cookies.putObject should also be called" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practiceCards functions savePracticeCards when called without args after called, $cookies.getObject(practiceCards) should be the same as practiceCards" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practiceCards functions getPracticeCards once called, returns practiceCards" time="0.004" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.practiceCards functions getPracticeCards if called and practiceCards is undefined, returns cookieData.practiceCards" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions saveCards called with args if value is undefined, does not save" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions saveCards called with args if value is defined should save by calling $cookies.putObject" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions saveCards called with args if value is defined if saved in cookies, getting it from $cookies.getObject should be the same" time="0.004" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions saveCards called without args cards is defined save it to the dataCards string" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions saveCards called without args cards is defined should be able to call the same object through $cookies.getObject" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions saveCards called without args cards is not defined should assign it to a default value and save" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions saveCards called without args cards is not defined should be able to retrieve the saved value through $cookies.getObject" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions getCards cards is defined should return same value as cards" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: FlashCardData data.cards functions getCards cards is undefined should assign it to default value and return the default value" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Controller: ContentController Should have access to cases" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Controller: ContentController Priority should be changed if the select box is changed" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics TimeConversion should be defined" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics Statistics' stats should be defined" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics methods should be defined" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable mean should be defined" time="0" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable stdDev should be defined" time="0" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable variance should be defined" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable mean5 should be defined" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable mean35 should be defined" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable mean10 should be defined" time="0.005" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable mean1012 should be defined" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable median should be defined" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable best should be defined" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable worst should be defined" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable q1 should be defined" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable q3 should be defined" time="0" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable iqr should be defined" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable mean100 should be defined" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics stats' variable range should be defined" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics addData data should be appended when this function is called with proper args" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics addData data that doesn't have a date object and/or a times string should not be appended" time="0.005" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics addData data should be added to the end of the array" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics loadData data should change in some way when function is called" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics loadData stats.data should contain integers" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics loadData stats.data should be defined still" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics calculate once called, the variables of stats should change" time="0.004" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics calculate should be called after loadData is called" time="0.006" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics calculate should be called after addData is called" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean stats.mean should change if mean() is called" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean mean should be -1 if the array is too small" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean mean should not be negative" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions stdDev if the variance is negative, somehow, standard deviation should be -1" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions stdDev standard deviation should be the square root of variance" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions stdDev different sets of numbers should give different standard deviations" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions stdDev if the length of data â‰¤ 5, stddev should be -1" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions variance if mean is -1, calls mean()" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions variance if the length of data â‰¤ 5, variance should be -1" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions variance if the length of data is suddenly â‰¤ 5, and recalculated, variance should be -1" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions variance variance should be the standard deviation squared" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean5 after called, and data length â‰¥ 5, avg() should be called" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean5 after called, and data length &lt; 5, avg() shouldn't be called" time="0.004" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean5 after called, and data length â‰¥ to 5, stats.mean5 should not be the same" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean5 after called, and data length &lt; 5, stats.mean5 should be -1" time="0.007" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean35 length > 5, avg() should be called when it is called" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean35 length &lt; 5, avg() should not be called when it is called" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean35 after called, and data length â‰¥ 5, with different data, stats.mean35 should not be the same" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean35 after called, and data length &lt; 5, stats.mean35 should be -1" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean10 when called, stats.mean10 should only change if the length of the data array is greater than/equal to 10" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean10 if length of data â‰¤ 10, should be -1" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean10 if the length of data becomes â‰¤ 10, should become -1" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean1012 when called, it should only change if length of the data is greater than/equal to 12" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean1012 if length of data â‰¤ 12, should be -1" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean1012 if length of data becomes â‰¤ 12, should become -1" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean100 if the size of the data array is less than 100, mean100 should be -1 when this is called" time="0.004" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean100 size of data â‰¥ 100, should not be -1" time="0.004" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean100 it should be positive if size of data â‰¥ 100" time="0.012" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions mean100 if data length becomes &lt; 100, should be -1" time="0.006" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions q1 after called, data length > 10, q1 should be smaller than q3" time="0.006" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions q1 after called, data length &lt; 10, q1 should be -1" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions median after called, and data length greater than 3, median should not be -1" time="0.003" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions median after called, stats.median should change" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions median if data length becomes &lt; 2 should be -1" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions q3 after called, and data.length greater han 10, should be greater than q1" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions best after called, and data.length â‰¥ 3, stats.best should be &lt; stats.worst" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions best if data length &lt; 3, should be -1" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions worst after called, and data.length â‰¥ 3, stats.worst should be > stats.best" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions worst if data length &lt; 3, worst should be -1" time="0.004" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions iqr after called, stats.iqr should be smaller than the entire range's value" time="0.011" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions iqr data length &lt;= 10, should be -1" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions range after called, range should be a string if data.length > 3" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: Statistics statistical functions range after called, range should be -1 if data.length â‰¤ 3" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion milliToSecond should be able to handle positive integers and round them" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion milliToMinute should be able to handle positive integers and round" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion getSeconds should be able to handle positive integers and floor them" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion getHours should be able to handle positive integers" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion getHours should be able to handle special, very unlikely cases" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion getMinutes should be able to handle positive integers" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion getMinutes should be able to floor the positive integers properly" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion getMillis should be able to handle positive integers" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion getMillis should be able to handle overflow" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion secondToMilli should handle any positive integer" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion minuteToMilli should handle any positive integer" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion stringToMillis Turn a regular time string in mm:ss.mmm into a number of milliseconds" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion stringToMillis Should be able to handle an abnormal time string in an odd format" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion stringToMillis Should be able to handle cases where the units are not what we're used to" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion stringToMillis Should be able to also handle cases where both the units and the formatting are unfamiliar" time="0" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="&#x9;Test:&#x9; Factory: TimeConversion millisToString Should be able to handle positive integers including and below 59 * 60000 + 59 * 1000 + 999" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).&#x9;Test:&#x9;"/>
  <testcase name="Filter: millisToString Should be able to handle normal, sub-3599999, quantities of milliseconds for formatting" time="0.002" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).Filter: millisToString"/>
  <testcase name="Filter: millisToString Should be able to handle time strings and return as-is" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).Filter: millisToString"/>
  <testcase name="Filter: millisToString Should return 0 if it's anything but a number or a time string" time="0.001" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).Filter: millisToString"/>
  <testcase name="Filter: millisToString Should return '--:--.--' if the number is -1" time="0" classname="Chrome_51_0_2704_(Mac_OS_X_10_10_5).Filter: millisToString"/>
  <system-out>
    <![CDATA[Chrome 51.0.2704 (Mac OS X 10.10.5) LOG: 'Defined.'
,Chrome 51.0.2704 (Mac OS X 10.10.5) LOG: 'Defined.'
,Chrome 51.0.2704 (Mac OS X 10.10.5) LOG: 'Defined.'
,Chrome 51.0.2704 (Mac OS X 10.10.5) LOG: 'Defined.'

]]>
  </system-out>
  <system-err/>
</testsuite>